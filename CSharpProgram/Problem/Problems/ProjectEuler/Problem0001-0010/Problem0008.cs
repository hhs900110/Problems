using System;

namespace Problem.ProjectEuler
{
    class Problem0008 : Problem
    {
        private readonly string[] kQuestion = new string[] {
            "다음은 연속된 1000자리 숫자입니다 (읽기 좋게 50자리씩 잘라놓음).",
            "\t73167176531330624919225119674426574742355349194934",
            "\t96983520312774506326239578318016984801869478851843",
            "\t85861560789112949495459501737958331952853208805511",
            "\t12540698747158523863050715693290963295227443043557",
            "\t66896648950445244523161731856403098[71112]1722383113",
            "\t62229893423380308135336276614282806444486645238749",
            "\t30358907296290491560440772390713810515859307960866",
            "\t70172427121883998797908792274921901699720888093776",
            "\t65727333001053367881220235421809751254540594752243",
            "\t52584907711670556013604839586446706324415722155397",
            "\t53697817977846174064955149290862569321978468622482",
            "\t83972241375657056057490261407972968652414535100474",
            "\t82166370484403199890008895243450658541227588666881",
            "\t16427171479924442928230863465674813919123162824586",
            "\t17866458359124566529476545682848912883142607690042",
            "\t24219022671055626321111109370544217506941658960408",
            "\t07198403850962455444362981230987879927244284909188",
            "\t84580156166097919133875499200524063689912560717606",
            "\t05886116467109405077541002256983155200055935729725",
            "\t71636269561882670428252483600823257530420752963450",
            "여기서 표시된 71112의 경우 7, 1, 1, 1, 2 각 숫자를 모두 곱하면 14가 됩니다.",
            "이런 식으로 맨 처음 (7 × 3 × 1 × 6 × 7 = 882) 부터 맨 끝 (6 × 3 × 4 × 5 × 0 = 0) 까지 5자리 숫자들의 곱을 구할 수 있습니다.",
            "이렇게 구할 수 있는 5자리 숫자의 곱 중에서 가장 큰 값은 얼마입니까?" };

        public Problem0008() : base(8) { }

        public override void Question()
        {
            PrintQuestion(kQuestion);
        }

        public override void Answer()
        {
            int answer = 0;

            string text = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

            answer = FindMaxMultifly(text, 5);

            PrintAnswer(answer.ToString());
        }

        private int FindMaxMultifly(string text, int charCount)
        {
            int returnValue = int.MinValue;

            char[] textArray = text.ToCharArray();
            int multiValue = 0;

            for (int i = 0; i <= textArray.Length - charCount; ++i)
            {
                multiValue = 1;
                for (int j = 0; j < charCount; ++j)
                {
                    multiValue *= int.Parse(textArray[i + j].ToString());
                }

                if (multiValue > returnValue)
                {
                    returnValue = multiValue;
                }
            }

            return returnValue;
        }
    }
}